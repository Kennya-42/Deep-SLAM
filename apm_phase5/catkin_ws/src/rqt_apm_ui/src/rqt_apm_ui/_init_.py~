import os
import rospy
import rospkg

from std_msgs.msg import Float32

from qt_gui.plugin import Plugin
from python_qt_binding import loadUi
from python_qt_binding.QtGui import QWidget

# Button stylesheets
style_normal = """
color: black;
font-size: 26px;
"""
style_active = """
color: green;
font-size: 26px;
"""

class apm_ui(Plugin):

    def __init__(self, context):
        super(apm_ui, self).__init__(context)

        # Process standalone plugin command-line arguments
        from argparse import ArgumentParser
        parser = ArgumentParser()
        # Add argument(s) to the parser.
        parser.add_argument("-q", "--quiet", action="store_true",
                      dest="quiet",
                      help="Put plugin in silent mode")
        args, unknowns = parser.parse_known_args(context.argv())
        if not args.quiet:
            print 'arguments: ', args
            print 'unknowns: ', unknowns

        # Create QWidget
        self._widget = QWidget()
        # Get path to UI file which should be in the "resource" folder of this package
        ui_file = os.path.join(rospkg.RosPack().get_path('rqt_apm_ui'), 'resource', 'APM.ui')
        # Extend the widget with all attributes and children from UI file
        loadUi(ui_file, self._widget)
        # Give QObjects reasonable names
        # self._widget.setObjectName('SpeedometerUi')
        # Show _widget.windowTitle on left-top of each plugin (when
        # it's set in _widget). This is useful when you open multiple
        # plugins at once. Also if you open multiple instances of your
        # plugin at once, these lines add number to make it easy to
        # tell from pane to pane.
        if context.serial_number() > 1:
            self._widget.setWindowTitle(self._widget.windowTitle() + (' (%d)' % context.serial_number()))
        # Add widget to the user interface
        context.add_widget(self._widget)

        # Init ROS topic subscriber
        #self.speed_sub = rospy.Subscriber('cart_odom_speed', Float32, self._on_speed_update)

        # The current mode for the cart
        # 0 - Manual
        # 1 - Remote
        # 2 - Autonomous
        self.mode = 0

		# Current Destination for the cart
		# 0 - Idle
		# 1 - Home
		# 2-7 - Locations around map
		self.destination = 0
		
		# Power voltage saved as integer
		self.V12 = 0
		self.V48 = 0
		
		# Display a test image %%TODO: Update Later for actual used
		# self._widget.mapView = QLabel()
		QPixmap default_image = QtGui.QPixmap(os.getcwd()+"/default_image.jpg")
		self._widget.mapView.setPixmap(defaultImage)
		self._widget.mapView.setMask(default_image.mask())
		self._widget.mapView.show()
		
        # Setup buttons
        self._widget.button_manual.clicked.connect(self.button_manual_pressed)
        self._widget.button_remote.clicked.connect(self.button_remote_pressed)
        self._widget.button_auto.clicked.connect(self.button_auto_pressed)
		self._widget.button_locationA.clicked.connect(self.button_locationA_pressed)
		self._widget.button_locationB.clicked.connect(self.button_locationB_pressed)
		self._widget.button_locationC.clicked.connect(self.button_locationC_pressed)
		self._widget.button_locationD.clicked.connect(self.button_locationD_pressed)
		self._widget.button_locationE.clicked.connect(self.button_locationE_pressed)
		self._widget.button_locationF.clicked.connect(self.button_locationF_pressed)
		self._widget.button_locationG.clicked.connect(self.button_locationG_pressed)
        self._update_button_state()

        # Timer for sending out the current mode
        self.publisher_mode = rospy.Publisher('apm_ui_mode', Float32, queue_size=1)
		self.publisher_destination = rospy.Publisher('apm_ui_destination', Float32, queue_size=1)
		#self.subscriber_12V = rospy.Subscriber('apm_12V_power', Float32, queue_size=1)
		#self.subscriber_48V = rospy.Subscriber('apm_48V_power', Float32, queue_size=1)
		
        rospy.Timer(rospy.Duration(1), self._publish_mode)

    def shutdown_plugin(self):
        #self.publisher_mode.unregister()
        pass

    def save_settings(self, plugin_settings, instance_settings):
        # TODO save intrinsic configuration, usually using:
        # instance_settings.set_value(k, v)
        pass

    def restore_settings(self, plugin_settings, instance_settings):
        # TODO restore intrinsic configuration, usually using:
        # v = instance_settings.value(k)
        pass

    def button_manual_pressed(self):
        self.mode = 0
        self._update_button_state()
        self._publish_mode(None)

    def button_remote_pressed(self):
        self.mode = 1
        self._update_button_state()
        self._publish_mode(None)

    def button_auto_pressed(self):
        self.mode = 2
        self._update_button_state()
        self._publish_mode(None)
		
	def button_locationA_pressed(self):
		self.destination = 1
		self._update_button_state()
		self._publish_mode(None)
		
	def button_locationB_pressed(self):
		self.destination = 2
		self._update_button_state()
		self._publish_mode(None)
		
	def button_locationC_pressed(self):
		self.destination = 3
		self._update_button_state()
		self._publish_mode(None)
		
	def button_locationD_pressed(self):
		self.destination = 4
		self._update_button_state()
		self._publish_mode(None)
		
	def button_locationE_pressed(self):
		self.destination = 5
		self._update_button_state()
		self._publish_mode(None)
		
	def button_locationF_pressed(self):
		self.destination = 6
		self._update_button_state()
		self._publish_mode(None)
		
	def button_locationG_pressed(self):
		self.destination = 7
		self._update_button_state()
		self._publish_mode(None)

    # Updates the UI state
    def _update_button_state(self):
        if self.mode == 0:
            self._widget.button_manual.setStyleSheet(style_active)
            self._widget.button_remote.setStyleSheet(style_normal)
            self._widget.button_auto.setStyleSheet(style_normal)
        elif self.mode == 1:
            self._widget.button_manual.setStyleSheet(style_normal)
            self._widget.button_remote.setStyleSheet(style_active)
            self._widget.button_auto.setStyleSheet(style_normal)
        else:
            self._widget.button_manual.setStyleSheet(style_normal)
            self._widget.button_remote.setStyleSheet(style_normal)
            self._widget.button_auto.setStyleSheet(style_active)
		if self.destination == 0:
			self._widget.button_locationA.setStyleSheet(style_normal)
			self._widget.button_locationB.setStyleSheet(style_normal)
			self._widget.button_locationC.setStyleSheet(style_normal)
			self._widget.button_locationD.setStyleSheet(style_normal)
			self._widget.button_locationE.setStyleSheet(style_normal)
			self._widget.button_locationF.setStyleSheet(style_normal)
			self._widget.button_locationG.setStyleSheet(style_normal)
		else:
			self._widget.button_locationA.setStyleSheet(style_active)
			self._widget.button_locationB.setStyleSheet(style_active)
			self._widget.button_locationC.setStyleSheet(style_active)
			self._widget.button_locationD.setStyleSheet(style_active)
			self._widget.button_locationE.setStyleSheet(style_active)
			self._widget.button_locationF.setStyleSheet(style_active)
			self._widget.button_locationG.setStyleSheet(style_active)
		self._widget.V12_bar.setValue((self.V12/12)*100)
		self._widget.V48_bar.setValue((self.V48/48)*100)
		
    # Publish the current mode of the cart
    def _publish_mode(self, event):
        self.publisher_mode.publish(Float32(self.mode))
		self.publisher_destination.publish(Float32(self.destination))
		#self.subscriber_12V.subscriber('12V_Charge', int, callback)
		#self.subscriber_48V.subscriber('48V_Charge', int, callback)
    #def trigger_configuration(self):
        # Comment in to signal that the plugin has a way to configure
        # This will enable a setting button (gear icon) in each dock widget title bar
        # Usually used to open a modal configuration dialog
